<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T02:13:20+08:00</updated><entry><title>2024 w17 期末專案</title><link href="./2024-Spring-w17-blog-tutorial.html" rel="alternate"></link><published>2024-06-13T11:00:00+08:00</published><updated>2024-06-20T02:13:20+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-06-13:./2024-Spring-w17-blog-tutorial.html</id><summary type="html">&lt;p&gt;九宮格小遊戲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;九宮格小遊戲&lt;/p&gt;


&lt;h1&gt;九宮格小遊戲&lt;/h1&gt;
&lt;p&gt;我試著用chatgpt這個小遊戲，製作的過程中，第一次只有自己與自己對決，所以我在遊戲內增加AI，也發現AI並沒有阻擋且特立獨行，我請chatgpt增加些智能性，增加過程有發現AI並沒有對我的行為做出反應，又請chatgpt進行內容的除錯，然後就有對我的行為做出反應，嘗試阻擋我並贏得勝利。&lt;/p&gt;</content><category term="w17"></category><category term="網誌編寫"></category></entry><entry><title>2024 w11 分組專案</title><link href="./2024-Spring-w11-blog-tutorial.html" rel="alternate"></link><published>2024-05-02T11:00:00+08:00</published><updated>2024-06-16T07:35:40+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-05-02:./2024-Spring-w11-blog-tutorial.html</id><summary type="html">&lt;p&gt;使用codespaces維護1astud-site倉儲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;使用codespaces維護1astud-site倉儲&lt;/p&gt;


&lt;h1&gt;建立頁面與心得&lt;/h1&gt;
&lt;p&gt;建立g8頁面和上傳個人心得&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category></entry><entry><title>2024 w10 分組專案</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-04-25T11:00:00+08:00</published><updated>2024-06-15T15:07:56+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-25:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;建立分組與新增心得&lt;/p&gt;
</summary><content type="html">&lt;p&gt;建立分組與新增心得&lt;/p&gt;


&lt;h1&gt;分組建立心得&lt;/h1&gt;
&lt;p&gt;包含學號、Github 帳號與組別. 各組在分組網站與網誌中, 建立能連結到各分組組員的課程倉儲與網站連結頁面以及心得. 並處理過程將各組員的歷程網站與網誌整理到分組倉儲中.&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>2024 w9 期中整理</title><link href="./2024-Spring-w9-blog-tutorial.html" rel="alternate"></link><published>2024-04-18T11:00:00+08:00</published><updated>2024-06-15T14:33:22+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-18:./2024-Spring-w9-blog-tutorial.html</id><summary type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程的英文名稱為 Web-based Content Management&lt;/p&gt;


&lt;h1&gt;網頁式內容管理&lt;/h1&gt;
&lt;p&gt;目前無論是 Github 的 Codespaces, Gitpod 或 Replit 都讓使用者可以直接在網頁瀏覽器中維護網站內容. 其中 Replit 還提供手機 App 讓使用者透過手機或平板管理網頁內容.&lt;/p&gt;
&lt;p&gt;網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版, 而編輯完成的網頁資料則可在 Github 倉儲中透過 Pages 的全球資訊網伺服器功能呈現網站內容.&lt;/p&gt;
&lt;p&gt;網際內容管理課程所採用的管理系統採用 Python Flask 編寫, 其中除了章節式的網頁內容採超文件的 H 標註進行分頁外, 還導入 Pelican 與 Reveal.js 等兩個延伸套件, 其中 Pelican 可用來建立網誌, 而 Reveal.js 則可用來建立網頁上的簡報資料.&lt;/p&gt;
&lt;p&gt;學習議題: 如何建立 Github 上的網站? 如何管理內容? 如何建立章節式網站? 能放入甚麼多媒體內容? 靜態圖文? 動態圖文? 線上遊戲? 3D 零組件展示? 如何建立網頁系統中的網誌? 如何建立網頁系統中的簡報?&lt;/p&gt;
&lt;h1&gt;Python 程式系統&lt;/h1&gt;
&lt;p&gt;上課用的電腦中配置了一套舊版的可攜式 Python 程式系統, 可讓使用者建立新版的可攜式 Python 程式系統, 放入 USB 隨身碟後, 可以在任何一台 64 位元的 Winodws 操作系統中使用, 主要目的除了可用來維護位於 Github 的網頁內容之外, 也可用來開發各種 Python 程式, 或與其他 Windows 應用套件結合使用, 例如: 與 CoppeliaSim 機器人模擬場景結合, 建立機電控制系統, 或與 Siemens NX 的 API 延伸程式結合應用.&lt;/p&gt;
&lt;p&gt;學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬?&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category></entry><entry><title>2024 w8 上課內容</title><link href="./2024-Spring-w8-blog-tutorial.html" rel="alternate"></link><published>2024-04-11T11:00:00+08:00</published><updated>2024-06-15T14:30:15+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-04-11:./2024-Spring-w8-blog-tutorial.html</id><summary type="html">&lt;p&gt;討論教育的本質&lt;/p&gt;
</summary><content type="html">&lt;p&gt;討論教育的本質&lt;/p&gt;


&lt;h1&gt;教育的本質&lt;/h1&gt;
&lt;p&gt;教育的本質看課程內容，以及嘗試將影片匯入網頁&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>2024 w6 上課內容</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-28T11:00:00+08:00</published><updated>2024-06-14T09:43:35+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-28:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;


&lt;h1&gt;Git 發展歷史&lt;/h1&gt;
&lt;p&gt;chatgpt的回答:&lt;/p&gt;
&lt;p&gt;Git 是一個分散式版本控制系統，由 Linus Torvalds 在2005年創建。 以下是 Git 的發展歷史要點：&lt;/p&gt;
&lt;p&gt;誕生：Git 誕生於 Linux 核心開發社群的需求。 Linus Torvalds 不滿意現有的版本控制系統，因此他決定著手建立一個新的系統來管理 Linux 核心的程式碼。&lt;/p&gt;
&lt;p&gt;首次發布：Git 在 2005 年 4 月以開源專案的形式首次發布。 最初的版本並不完整，但已經具備了基本的版本控制功能。&lt;/p&gt;
&lt;p&gt;快速發展：由於其分散式特性、速度快、強大的分支支援和完整的歷史記錄等優點，Git 很快就受到了開發者的歡迎，並在開源社群中迅速流行起來。&lt;/p&gt;
&lt;p&gt;GitHub 的出現：GitHub 是一個基於 Git 的程式碼託管平台，於2008年創建。 它為開發者提供了一個共享程式碼、協作開發的平台，並促進了 Git 的進一步普及。&lt;/p&gt;
&lt;p&gt;持續改進：Git 專案本身也在不斷改進和演進，包括增強效能、改進使用者介面、增加新的功能等。 Git 的社群也持續貢獻程式碼和回饋意見，推動了 Git 的發展。&lt;/p&gt;
&lt;p&gt;版本發布：Git 專案定期發布新版本，每個版本都包含了一系列的改進和修復。 這些版本發布通常由 Git 的核心開發團隊負責，並透過社群的回饋進行改進。&lt;/p&gt;
&lt;p&gt;總的來說，Git 的發展歷史可以概括為從一個簡單的版本控制系統到成為開發者首選的版本控制工具之一。 它不斷吸收和整合了開發者的需求和回饋，持續改進和完善，成為了現代軟體開發不可或缺的一部分。&lt;/p&gt;
&lt;h1&gt;git 解決問題&lt;/h1&gt;
&lt;p&gt;chatgpt的回答:&lt;/p&gt;
&lt;p&gt;版本控制： Git是一個分散式版本控制系統，可以追蹤檔案的修改歷史。 專業人士可以使用Git來管理專案的不同版本，可以輕鬆地回滾到先前的版本，查看每個版本之間的變化，並追蹤誰做出了哪些修改。&lt;/p&gt;
&lt;p&gt;協作開發： Git讓多人協作開發變得簡單。 團隊成員可以在各自的本地副本上工作，並透過Git將他們的工作同步到共享的遠端倉庫。 Git提供了分支功能，讓團隊成員可以在不干擾主線開發的情況下並行開發新功能或修復bug。&lt;/p&gt;
&lt;p&gt;程式碼審查： Git的分支和合併功能使得程式碼審查變得更加簡單。 團隊成員可以在單獨的分支上開發新功能或修復bug，然後請其他成員審查他們的程式碼。 審查者可以輕鬆地比較分支之間的差異，並提出建議或進行修改。&lt;/p&gt;
&lt;p&gt;追蹤問題： 專業人士可以使用Git來追蹤和管理專案中的問題或任務。 可以透過在提交訊息中引用問題編號或使用整合的問題追蹤系統（如GitHub的Issue）來關聯提交與特定問題。 這使得團隊成員可以輕鬆地查看哪些提交解決了哪些問題。&lt;/p&gt;
&lt;p&gt;備份與還原： Git不僅可以用於版本控制，還可以作為備份工具。 透過將專案的Git倉庫複製到不同的位置，可以輕鬆建立專案的備份。 如果需要恢復到之前的狀態，可以簡單地檢出相應的提交。&lt;/p&gt;
&lt;p&gt;跨平台支援： Git是跨平台的，可以在Windows、macOS和Linux等各種作業系統上運作。 這使得專業人士可以在不同的工作環境中無縫地使用Git進行內容管理。&lt;/p&gt;
&lt;p&gt;透過利用Git的這些功能，相同專業的人士可以更有效率地管理專案內容，並與團隊成員進行協作開發。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>2024 w5 上課內容</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-21T11:00:00+08:00</published><updated>2024-06-14T08:49:08+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-21:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;觀看影片&lt;/p&gt;
</summary><content type="html">&lt;p&gt;觀看影片&lt;/p&gt;


&lt;h1&gt;影片內容&lt;/h1&gt;
&lt;p&gt;本周講述如何使用 Replit 修改網站標題&lt;/p&gt;
&lt;p&gt;還有如何使用 codespaces 維護網站內容&lt;/p&gt;
&lt;p&gt;講述 Replit 平台上的分組倉儲權限設定&lt;/p&gt;
&lt;p&gt;還有在 Replit 執行靜態網站檢視&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>2024 w4 上課內容</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-14T11:00:00+08:00</published><updated>2024-06-14T09:32:30+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;建立網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;建立網站&lt;/p&gt;


&lt;h1&gt;關於建立網站&lt;/h1&gt;
&lt;p&gt;這裡所謂的網站指的是 Web site, 也就是 WWW (World Wide Web) 伺服器 (Server)端的超文件 (Hypertext), 且此超文件包含 css 與 Javascript 資料, 用來定義使用者利用瀏覽器連線時所得到的資料內容.&lt;/p&gt;
&lt;p&gt;網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體.&lt;/p&gt;
&lt;p&gt;管理的網站內容, 從沒到有的過程中留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁.&lt;/p&gt;
&lt;h1&gt;使用Replit 建立分組倉儲權限&lt;/h1&gt;
&lt;p&gt;由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為:&lt;/p&gt;
&lt;p&gt;Host github.com&lt;/p&gt;
&lt;p&gt;User git&lt;/p&gt;
&lt;p&gt;Hostname github.com&lt;/p&gt;
&lt;p&gt;而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git&lt;/p&gt;
&lt;p&gt;當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行: python3 ssh.py&lt;/p&gt;
&lt;p&gt;ssh.py 程式內容如下:&lt;/p&gt;
&lt;p&gt;import os&lt;/p&gt;
&lt;p&gt;if not os.path.exists("/home/runner/.ssh"): &lt;/p&gt;
&lt;p&gt;os.makedirs("/home/runner/.ssh") &lt;/p&gt;
&lt;p&gt;os.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")&lt;/p&gt;
&lt;p&gt;os.system("mv ./downloads/config.txt /home/runner/.ssh/config")&lt;/p&gt;
&lt;p&gt;os.system("chmod og-rwx /home/runner/.ssh/id_rsa")&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>2024 w3 上課內容</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-07T11:00:00+08:00</published><updated>2024-06-14T03:47:24+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-03-07:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;使用 Github Classroom 分組，以及git指令&lt;/p&gt;
</summary><content type="html">&lt;p&gt;使用 Github Classroom 分組，以及git指令&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 分組&lt;/h1&gt;
&lt;p&gt;四技期中分組作業名稱為 1a, 組長在取得作業連結之後, 自行建立各組 Team, 以第一組為例,名稱為 ag1, 之後以每組最多 6 名組員, 透過作業連結加入 ag1 Team, 其餘各組組員則依序建立 ag2, ag3 等 Team 名稱, 讓該組組員可以加入.&lt;/p&gt;
&lt;p&gt;以第一組為例, 完成 ag1 Team 建立後, 將取得 mdewcm2024 帳號下的 1a-ag1 倉儲, 所有第一組的組員均對此分組倉儲有管理權, 可以使用登入 Github 的帳號權限進行改版.&lt;/p&gt;
&lt;h1&gt;git 指令&lt;/h1&gt;
&lt;p&gt;git add . (新增內容)&lt;/p&gt;
&lt;p&gt;git commit -m "說明字串" (提交及名稱)&lt;/p&gt;
&lt;p&gt;git push (推送內容)&lt;/p&gt;
&lt;p&gt;git config --global user.name ("提交者的 github 帳號名稱")&lt;/p&gt;
&lt;p&gt;git config --global user.email ("提交者在 github 所登錄的 email address")&lt;/p&gt;
&lt;p&gt;git version (查詢目前所使用的 git 版本)&lt;/p&gt;
&lt;p&gt;git status (檢查目前近端改版情況)&lt;/p&gt;
&lt;p&gt;git pull=git fetch + git merge&lt;/p&gt;
&lt;p&gt;git submodule add (倉儲網址子目錄)&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules (git 指定目錄與否)&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>2024 w2 上課內容</title><link href="./2024-Spring-w2-blog-tutorial.html" rel="alternate"></link><published>2024-02-29T11:00:00+08:00</published><updated>2024-06-14T03:42:04+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-29:./2024-Spring-w2-blog-tutorial.html</id><summary type="html">&lt;p&gt;使用replit維護&lt;/p&gt;
</summary><content type="html">&lt;p&gt;使用replit維護&lt;/p&gt;


&lt;h1&gt;利用 Replit 維護網站&lt;/h1&gt;
&lt;p&gt;以 email 作為登入 Replit 的帳號,以保有使用的獨立性。&lt;/p&gt;
&lt;h1&gt;利用 Codespaces 維護網站&lt;/h1&gt;
&lt;p&gt;Codespaces 屬於目前 Github 下的功能之一, 與 Github 倉儲內容維護的整合度最高,採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能, 在 Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行.&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>2024 w1 上課內容</title><link href="./2024-Spring-W1-blog-tutorial.html" rel="alternate"></link><published>2024-02-22T11:00:00+08:00</published><updated>2024-06-14T03:41:49+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-22:./2024-Spring-W1-blog-tutorial.html</id><summary type="html">&lt;p&gt;建立githud個人網站&lt;/p&gt;
</summary><content type="html">&lt;p&gt;建立githud個人網站&lt;/p&gt;


&lt;h1&gt;建立個人網站&lt;/h1&gt;
&lt;p&gt;網際內容管理的個人課程網站名稱為 wcm2024，登入 Github 後，連接至 https://github.com/mdecycu/cmsimde_site, 以此倉儲作為 Template 建立個人的 wcm2024 倉儲, 並將倉儲主分支設定 Github Pages 後, 檢查是否已經可以連線到個人的課程網頁.&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-13T14:49:42+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>