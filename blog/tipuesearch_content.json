{"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/mdecycu/cmsimde_site 網站: https://mde.tw/cmsimde_site/ 簡報: https://mde.tw/cmsimde_site/reveal 網誌: https://mde.tw/cmsimde_site/blog","tags":"misc","url":"./pages/about/"},{"title":"2024 w9 期中整理","text":"網際內容管理課程的英文名稱為 Web-based Content Management 網頁式內容管理 目前無論是 Github 的 Codespaces, Gitpod 或 Replit 都讓使用者可以直接在網頁瀏覽器中維護網站內容. 其中 Replit 還提供手機 App 讓使用者透過手機或平板管理網頁內容. 網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版, 而編輯完成的網頁資料則可在 Github 倉儲中透過 Pages 的全球資訊網伺服器功能呈現網站內容. 網際內容管理課程所採用的管理系統採用 Python Flask 編寫, 其中除了章節式的網頁內容採超文件的 H 標註進行分頁外, 還導入 Pelican 與 Reveal.js 等兩個延伸套件, 其中 Pelican 可用來建立網誌, 而 Reveal.js 則可用來建立網頁上的簡報資料. 學習議題: 如何建立 Github 上的網站? 如何管理內容? 如何建立章節式網站? 能放入甚麼多媒體內容? 靜態圖文? 動態圖文? 線上遊戲? 3D 零組件展示? 如何建立網頁系統中的網誌? 如何建立網頁系統中的簡報? Python 程式系統 上課用的電腦中配置了一套舊版的可攜式 Python 程式系統, 可讓使用者建立新版的可攜式 Python 程式系統, 放入 USB 隨身碟後, 可以在任何一台 64 位元的 Winodws 操作系統中使用, 主要目的除了可用來維護位於 Github 的網頁內容之外, 也可用來開發各種 Python 程式, 或與其他 Windows 應用套件結合使用, 例如: 與 CoppeliaSim 機器人模擬場景結合, 建立機電控制系統, 或與 Siemens NX 的 API 延伸程式結合應用. 學習議題: 如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? (精密)機械設計流程? 設計運算? 特定系統模擬?","tags":"w9","url":"./2024-Spring-w9-blog-tutorial.html"},{"title":"2024 w8 上課內容","text":"討論教育的本質 教育的本質 教育的本質看課程內容，以及嘗試將影片匯入網頁","tags":"w8","url":"./2024-Spring-w8-blog-tutorial.html"},{"title":"2024 w6 上課內容","text":"如何透過與 ChatGPT 的對話, 了解有關 git 在不同專業領域的應用方法. Git 發展歷史 chatgpt的回答: Git 是一個分散式版本控制系統，由 Linus Torvalds 在2005年創建。 以下是 Git 的發展歷史要點： 誕生：Git 誕生於 Linux 核心開發社群的需求。 Linus Torvalds 不滿意現有的版本控制系統，因此他決定著手建立一個新的系統來管理 Linux 核心的程式碼。 首次發布：Git 在 2005 年 4 月以開源專案的形式首次發布。 最初的版本並不完整，但已經具備了基本的版本控制功能。 快速發展：由於其分散式特性、速度快、強大的分支支援和完整的歷史記錄等優點，Git 很快就受到了開發者的歡迎，並在開源社群中迅速流行起來。 GitHub 的出現：GitHub 是一個基於 Git 的程式碼託管平台，於2008年創建。 它為開發者提供了一個共享程式碼、協作開發的平台，並促進了 Git 的進一步普及。 持續改進：Git 專案本身也在不斷改進和演進，包括增強效能、改進使用者介面、增加新的功能等。 Git 的社群也持續貢獻程式碼和回饋意見，推動了 Git 的發展。 版本發布：Git 專案定期發布新版本，每個版本都包含了一系列的改進和修復。 這些版本發布通常由 Git 的核心開發團隊負責，並透過社群的回饋進行改進。 總的來說，Git 的發展歷史可以概括為從一個簡單的版本控制系統到成為開發者首選的版本控制工具之一。 它不斷吸收和整合了開發者的需求和回饋，持續改進和完善，成為了現代軟體開發不可或缺的一部分。 git 解決問題 chatgpt的回答: 版本控制： Git是一個分散式版本控制系統，可以追蹤檔案的修改歷史。 專業人士可以使用Git來管理專案的不同版本，可以輕鬆地回滾到先前的版本，查看每個版本之間的變化，並追蹤誰做出了哪些修改。 協作開發： Git讓多人協作開發變得簡單。 團隊成員可以在各自的本地副本上工作，並透過Git將他們的工作同步到共享的遠端倉庫。 Git提供了分支功能，讓團隊成員可以在不干擾主線開發的情況下並行開發新功能或修復bug。 程式碼審查： Git的分支和合併功能使得程式碼審查變得更加簡單。 團隊成員可以在單獨的分支上開發新功能或修復bug，然後請其他成員審查他們的程式碼。 審查者可以輕鬆地比較分支之間的差異，並提出建議或進行修改。 追蹤問題： 專業人士可以使用Git來追蹤和管理專案中的問題或任務。 可以透過在提交訊息中引用問題編號或使用整合的問題追蹤系統（如GitHub的Issue）來關聯提交與特定問題。 這使得團隊成員可以輕鬆地查看哪些提交解決了哪些問題。 備份與還原： Git不僅可以用於版本控制，還可以作為備份工具。 透過將專案的Git倉庫複製到不同的位置，可以輕鬆建立專案的備份。 如果需要恢復到之前的狀態，可以簡單地檢出相應的提交。 跨平台支援： Git是跨平台的，可以在Windows、macOS和Linux等各種作業系統上運作。 這使得專業人士可以在不同的工作環境中無縫地使用Git進行內容管理。 透過利用Git的這些功能，相同專業的人士可以更有效率地管理專案內容，並與團隊成員進行協作開發。","tags":"w6","url":"./2024-Spring-w6-blog-tutorial.html"},{"title":"2024 w5 上課內容","text":"觀看影片 影片內容 本周講述如何使用 Replit 修改網站標題 還有如何使用 codespaces 維護網站內容 講述 Replit 平台上的分組倉儲權限設定 還有在 Replit 執行靜態網站檢視","tags":"w5","url":"./2024-Spring-w5-blog-tutorial.html"},{"title":"2024 w4 上課內容","text":"建立網站 關於建立網站 這裡所謂的網站指的是 Web site, 也就是 WWW (World Wide Web) 伺服器 (Server)端的超文件 (Hypertext), 且此超文件包含 css 與 Javascript 資料, 用來定義使用者利用瀏覽器連線時所得到的資料內容. 網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體. 管理的網站內容, 從沒到有的過程中留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁. 使用Replit 建立分組倉儲權限 由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為: Host github.com User git Hostname github.com 而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是: git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git 當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行: python3 ssh.py ssh.py 程式內容如下: import os if not os.path.exists(\"/home/runner/.ssh\"): os.makedirs(\"/home/runner/.ssh\") os.system(\"mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa\") os.system(\"mv ./downloads/config.txt /home/runner/.ssh/config\") os.system(\"chmod og-rwx /home/runner/.ssh/id_rsa\")","tags":"w4","url":"./2024-Spring-w4-blog-tutorial.html"},{"title":"2024 w3 上課內容","text":"使用 Github Classroom 分組，以及git指令 利用 Github Classroom 分組 四技期中分組作業名稱為 1a, 組長在取得作業連結之後, 自行建立各組 Team, 以第一組為例,名稱為 ag1, 之後以每組最多 6 名組員, 透過作業連結加入 ag1 Team, 其餘各組組員則依序建立 ag2, ag3 等 Team 名稱, 讓該組組員可以加入. 以第一組為例, 完成 ag1 Team 建立後, 將取得 mdewcm2024 帳號下的 1a-ag1 倉儲, 所有第一組的組員均對此分組倉儲有管理權, 可以使用登入 Github 的帳號權限進行改版. git 指令 git add . (新增內容) git commit -m \"說明字串\" (提交及名稱) git push (推送內容) git config --global user.name (\"提交者的 github 帳號名稱\") git config --global user.email (\"提交者在 github 所登錄的 email address\") git version (查詢目前所使用的 git 版本) git status (檢查目前近端改版情況) git pull=git fetch + git merge git submodule add (倉儲網址子目錄) git clone --recurse-submodules (git 指定目錄與否)","tags":"w3","url":"./2024-Spring-w3-blog-tutorial.html"},{"title":"2024 w2 上課內容","text":"使用replit維護 利用 Replit 維護網站 以 email 作為登入 Replit 的帳號,以保有使用的獨立性。 利用 Codespaces 維護網站 Codespaces 屬於目前 Github 下的功能之一, 與 Github 倉儲內容維護的整合度最高,採用 Github Codespaces 維護網站的好處是, Visual Studio code 介面提供多終端機與多 ports 開啟功能, 在 Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行.","tags":"w2","url":"./2024-Spring-w2-blog-tutorial.html"},{"title":"2024 w1 上課內容","text":"建立githud個人網站 建立個人網站 網際內容管理的個人課程網站名稱為 wcm2024，登入 Github 後，連接至 https://github.com/mdecycu/cmsimde_site, 以此倉儲作為 Template 建立個人的 wcm2024 倉儲, 並將倉儲主分支設定 Github Pages 後, 檢查是否已經可以連線到個人的課程網頁.","tags":"w1","url":"./2024-Spring-W1-blog-tutorial.html"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2024-Spring-w1-blog-tutorial.html"}]}