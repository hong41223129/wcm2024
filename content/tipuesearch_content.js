var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://hong41223129.github.io/wcm2024/ \n 網誌:\xa0 https://hong41223129.github.io/wcm2024/blog \n 簡報:\xa0 https://hong41223129.github.io/wcm2024/reveal \n 倉儲:\xa0 https://github.com/hong41223129/wcm2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'http://hong41223129.github.io/wcm2024 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'w3', 'text': 'git \n git add . (新增內容) \n git commit -m "說明字串" (提交及名稱) \n git push (推送內容) \n git config --global user.name ("提交者的 github 帳號名稱") \n git config --global user.email ("提交者在 github 所登錄的 email address") \n git version (查詢目前所使用的 git 版本) \n git status (檢查目前近端改版情況) \n git pull=git fetch + git merge \n git submodule add (倉儲網址子目錄) \n git clone --recurse-submodules (git 指定目錄與否) \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w6', 'text': 'git的發展歷史 \n chatgpt的回答: \n \n Git 是一個分散式版本控制系統，由 Linus Torvalds 在2005年創建。 以下是 Git 的發展歷史要點： \n 誕生：Git 誕生於 Linux 核心開發社群的需求。 Linus Torvalds 不滿意現有的版本控制系統，因此他決定著手建立一個新的系統來管理 Linux 核心的程式碼。 \n 首次發布：Git 在 2005 年 4 月以開源專案的形式首次發布。 最初的版本並不完整，但已經具備了基本的版本控制功能。 \n 快速發展：由於其分散式特性、速度快、強大的分支支援和完整的歷史記錄等優點，Git 很快就受到了開發者的歡迎，並在開源社群中迅速流行起來。 \n GitHub 的出現：GitHub 是一個基於 Git 的程式碼託管平台，於2008年創建。 它為開發者提供了一個共享程式碼、協作開發的平台，並促進了 Git 的進一步普及。 \n 持續改進：Git 專案本身也在不斷改進和演進，包括增強效能、改進使用者介面、增加新的功能等。 Git 的社群也持續貢獻程式碼和回饋意見，推動了 Git 的發展。 \n 版本發布：Git 專案定期發布新版本，每個版本都包含了一系列的改進和修復。 這些版本發布通常由 Git 的核心開發團隊負責，並透過社群的回饋進行改進。 \n 總的來說，Git 的發展歷史可以概括為從一個簡單的版本控制系統到成為開發者首選的版本控制工具之一。 它不斷吸收和整合了開發者的需求和回饋，持續改進和完善，成為了現代軟體開發不可或缺的一部分。 \n Git 創辦人 Linus Torvalds的相關履歷 \n chatgpt的回答: \n \n Linus Torvalds 是電腦科學家和軟體工程師，最著名的成就是創建了 Linux 作業系統內核，並作為其最主要的開發者之一。\xa0 \n 早年生活與教育：Linus Benedict Torvalds 出生於1969年12月28日，是芬蘭赫爾辛基的一名芬蘭瑞典族人。 他在赫爾辛基大學學習電腦科學，並於1996年獲得了電腦科學碩士學位。 \n Linux 核心的創建：在1991年，當時還是大學生的 Linus Torvalds 開始了他的 Linux 核心項目，最初是作為一個個人的愛好。 他發布了第一個版本的 Linux 內核，並邀請其他人參與貢獻和改進。 \n 開源社群的發展：隨著時間的推移，Linux 核心專案吸引了越來越多的開發者，成為了一個龐大而活躍的開源社群。 Torvalds 作為 Linux 核心專案的領導者，促進了社群的發展和協作。 \n 工作經驗：除了 Linux 核心項目，Torvalds 也曾在一些公司工作過，包括 Transmeta Corporation（2003-2006）和 Open Source Development Labs（現在的 Linux 基金會）。 \n 貢獻和榮譽：Linus Torvalds 因他對電腦科學和開源軟體的貢獻獲得了許多獎項和榮譽，包括 Free Software Foundation 頒發的自由軟體獎、終身成就獎等。 \n Git 的創建：除了 Linux 核心之外，Linus Torvalds 還在2005年創建了 Git 分散式版本控制系統，以改進 Linux 核心開發過程中的版本控制問題。 \n 個人生活：除了電腦科學，Torvalds 對潛水、摩托車和其他戶外活動也有著濃厚的興趣。 他和他的妻子 Tove Torvalds 有三個孩子。 \n 總的來說，Linus Torvalds 是一位對電腦科學和開源軟體產生了重大影響的人物，他的貢獻不僅體現在他創造的Linux 內核和Git 等專案中，還體現在他對開源社群的領導和 促進中。 \n 一般相同專業人士如何利用 git 解決內容管理問題? \n chatgpt的回答: \n \n 版本控制： Git是一個分散式版本控制系統，可以追蹤檔案的修改歷史。 專業人士可以使用Git來管理專案的不同版本，可以輕鬆地回滾到先前的版本，查看每個版本之間的變化，並追蹤誰做出了哪些修改。 \n 協作開發： Git讓多人協作開發變得簡單。 團隊成員可以在各自的本地副本上工作，並透過Git將他們的工作同步到共享的遠端倉庫。 Git提供了分支功能，讓團隊成員可以在不干擾主線開發的情況下並行開發新功能或修復bug。 \n 程式碼審查： Git的分支和合併功能使得程式碼審查變得更加簡單。 團隊成員可以在單獨的分支上開發新功能或修復bug，然後請其他成員審查他們的程式碼。 審查者可以輕鬆地比較分支之間的差異，並提出建議或進行修改。 \n 追蹤問題： 專業人士可以使用Git來追蹤和管理專案中的問題或任務。 可以透過在提交訊息中引用問題編號或使用整合的問題追蹤系統（如GitHub的Issue）來關聯提交與特定問題。 這使得團隊成員可以輕鬆地查看哪些提交解決了哪些問題。 \n 備份與還原： Git不僅可以用於版本控制，還可以作為備份工具。 透過將專案的Git倉庫複製到不同的位置，可以輕鬆建立專案的備份。 如果需要恢復到之前的狀態，可以簡單地檢出相應的提交。 \n 跨平台支援： Git是跨平台的，可以在Windows、macOS和Linux等各種作業系統上運作。 這使得專業人士可以在不同的工作環境中無縫地使用Git進行內容管理。 \n 透過利用Git的這些功能，相同專業的人士可以更有效率地管理專案內容，並與團隊成員進行協作開發。 \n 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? \n chatgpt的回答: \n 1.準備工作： \n 安裝Git： 如果你還沒在Windows上安裝Git，首先需要從Git官網（https://git-scm.com/）下載並安裝Git。 \n 設定Git： 安裝完成後，開啟命令提示字元（cmd）或PowerShell，並設定Git的全域配置，包括使用者名稱和信箱位址： \n git config --global user.name "Your Name" git config --global user.email "youremail@example.com" \n 選擇伺服器： 你可以選擇使用自架的Git伺服器，如GitLab、Gitea等，也可以使用託管服務，如GitHub、Bitbucket等。 \n 2.搭建Git伺服器： \n 安裝與設定伺服器： 依照所選伺服器的安裝指南在Windows上安裝並設定Git伺服器。 每個伺服器都有不同的安裝和設定步驟，因此需要根據所選伺服器的指南進行操作。 \n 建立倉庫： 在Git伺服器上建立一個新的倉庫，以便在演示中使用。 \n 3.設定本地Git客戶端： \n 複製倉庫： 在本機電腦上選擇目錄，並使用Git指令複製剛建立的倉庫： git clone <倉庫URL> \n 進行修改： 在克隆下來的倉庫中進行一些修改或新增檔案。 git add . \n 提交變更： 將變更提交至本地倉庫： git commit -m "Your commit message" \n 推送變更： 將變更推送到Git伺服器： git push origin master \n 這裡的"master"可以替換為你所使用的分支名稱。 \n 4.演示： \n 示範修改： 在示範中展示如何在本機修改文件，並使用Git提交並推送變更到Git伺服器。 \n 示範多人協作： 如果有多位參與者，可以模擬多人協作的情況。 一個人可以在本地進行修改，提交到Git伺服器，而另一個人可以從伺服器上拉取更改，並在本地進行修改和提交。 \n 示範版本控制： 示範如何使用Git查看歷史提交記錄，比較不同版本之間的差異，並恢復到先前的版本。 \n 透過這些步驟，你可以在Windows上進行實際的Git客戶端和Git伺服器演示，並向觀眾展示Git的基本工作流程和功能。 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w8', 'text': '介紹教育的意義與本質 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w10', 'text': '在 https://github.com/mdewcm2024/1astud-site \xa0在各組內新增心得 \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};